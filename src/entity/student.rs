//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.2

use super::sea_orm_active_enums::StuCno1IsDel;
use super::sea_orm_active_enums::StuCno2IsDel;
use super::sea_orm_active_enums::StuCno3IsDel;
use super::sea_orm_active_enums::StuEnable;
use super::sea_orm_active_enums::StuIsDel;
use super::sea_orm_active_enums::StuSex;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "student")]
pub struct Model {
    pub stu_term: String,
    pub stu_grade: String,
    #[sea_orm(primary_key, auto_increment = false)]
    pub stu_no: String,
    pub stu_name: String,
    pub stu_sex: StuSex,
    pub stu_password: String,
    pub stu_class_fname: String,
    pub stu_class_sname: String,
    pub stu_userlevel: String,
    pub stu_enable: StuEnable,
    pub stu_add_date: Option<DateTime>,
    pub stu_cno_1: Option<String>,
    pub stu_cno_1_is_del: StuCno1IsDel,
    pub stu_cno_2: Option<String>,
    pub stu_cno_2_is_del: StuCno2IsDel,
    pub stu_cno_3: Option<String>,
    pub stu_cno_3_is_del: StuCno3IsDel,
    pub stu_is_del: StuIsDel,
    #[sea_orm(column_type = "Text", nullable)]
    pub stu_comment: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::course::Entity",
        from = "Column::StuTerm",
        to = "super::course::Column::CourseTerm",
        on_update = "Cascade",
        on_delete = "NoAction"
    )]
    Course,
    #[sea_orm(has_many = "super::log_homework::Entity")]
    LogHomework,
    #[sea_orm(has_many = "super::log_homework_uploaded::Entity")]
    LogHomeworkUploaded,
    #[sea_orm(has_many = "super::log_login::Entity")]
    LogLogin,
    #[sea_orm(has_many = "super::log_post::Entity")]
    LogPost,
    #[sea_orm(
        belongs_to = "super::term::Entity",
        from = "Column::StuTerm",
        to = "super::term::Column::TermNo",
        on_update = "Cascade",
        on_delete = "NoAction"
    )]
    Term,
}

impl Related<super::course::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Course.def()
    }
}

impl Related<super::log_homework::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::LogHomework.def()
    }
}

impl Related<super::log_homework_uploaded::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::LogHomeworkUploaded.def()
    }
}

impl Related<super::log_login::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::LogLogin.def()
    }
}

impl Related<super::log_post::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::LogPost.def()
    }
}

impl Related<super::term::Entity> for Entity {
    fn to() -> RelationDef {
        super::course::Relation::Term.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::course::Relation::Student.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
