//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.2

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "term")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub term_no: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::course::Entity")]
    Course,
    #[sea_orm(has_many = "super::homework::Entity")]
    Homework,
    #[sea_orm(has_many = "super::homework_uploaded::Entity")]
    HomeworkUploaded,
    #[sea_orm(has_many = "super::post::Entity")]
    Post,
    #[sea_orm(has_many = "super::student::Entity")]
    Student,
}

impl Related<super::course::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Course.def()
    }
}

impl Related<super::homework::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Homework.def()
    }
}

impl Related<super::homework_uploaded::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::HomeworkUploaded.def()
    }
}

impl Related<super::post::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Post.def()
    }
}

impl Related<super::student::Entity> for Entity {
    fn to() -> RelationDef {
        super::course::Relation::Student.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::course::Relation::Term.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
