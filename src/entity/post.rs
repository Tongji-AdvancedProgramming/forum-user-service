//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.2

use super::sea_orm_active_enums::PostIsDel;
use super::sea_orm_active_enums::PostTag01;
use super::sea_orm_active_enums::PostTag02;
use super::sea_orm_active_enums::PostTag03;
use super::sea_orm_active_enums::PostTag04;
use super::sea_orm_active_enums::PostTag05;
use super::sea_orm_active_enums::PostTag06;
use super::sea_orm_active_enums::PostTag07;
use super::sea_orm_active_enums::PostTag08;
use super::sea_orm_active_enums::PostTag09;
use super::sea_orm_active_enums::PostTag10;
use super::sea_orm_active_enums::PostType;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "post")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub post_id: i32,
    pub post_term: String,
    pub post_ccode: String,
    pub post_hwup_or_hw_id: String,
    pub post_week: i8,
    pub post_chapter: i8,
    pub post_answer_id: Option<i32>,
    pub post_type: PostType,
    pub post_sno: String,
    pub post_priority: String,
    pub post_tag_01: PostTag01,
    pub post_tag_02: PostTag02,
    pub post_tag_03: PostTag03,
    pub post_tag_04: PostTag04,
    pub post_tag_05: PostTag05,
    pub post_tag_06: PostTag06,
    pub post_tag_07: PostTag07,
    pub post_tag_08: PostTag08,
    pub post_tag_09: PostTag09,
    pub post_tag_10: PostTag10,
    #[sea_orm(column_type = "Text", nullable)]
    pub post_content: Option<String>,
    pub post_date: DateTime,
    pub post_is_del: PostIsDel,
    #[sea_orm(column_type = "Text", nullable)]
    pub post_comment: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::log_post::Entity")]
    LogPost,
    #[sea_orm(
        belongs_to = "Entity",
        from = "Column::PostAnswerId",
        to = "Column::PostId",
        on_update = "Cascade",
        on_delete = "NoAction"
    )]
    SelfRef,
    #[sea_orm(
        belongs_to = "super::term::Entity",
        from = "Column::PostTerm",
        to = "super::term::Column::TermNo",
        on_update = "Cascade",
        on_delete = "NoAction"
    )]
    Term,
}

impl Related<super::log_post::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::LogPost.def()
    }
}

impl Related<super::term::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Term.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
